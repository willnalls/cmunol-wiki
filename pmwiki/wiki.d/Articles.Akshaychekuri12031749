version=pmwiki-2.2.130 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
author=kushaanm
charset=UTF-8
csum=
ctime=1670119556
host=96.235.24.205
name=Articles.Akshaychekuri12031749
rev=10
targets=GradebookArticles.Akshaychekuri12031749,Articles.Akshaychekuri12031749,Category.Varia
text=(:if [ authgroup @tas || authgroup @admins || equal {$Author} '' ]:)%0a%0a(:toggle id=gi show="show grading interface" hide="hide grading interface":)%0a%0a>>id=gi%3c%3c%0a%0a[[GradebookArticles.{$Name}|See article in gradebook]] \\%0a[[{$FullName}?action=diff|See all changes to article]] \\%0a[[{$FullName}?action=edit|Edit this page]] \\%0aStatus: {GradebookArticles.{$Name}$:Status} %0a%0a(:foxform Site.FoxForms#gradeitem:)%0a%0a(:foxform Site.FoxForms#gradingcomment:)%0a%0a>>%3c%3c%0a%0a----%0a%0a(:ifend:)%0a%0a[[!{$:Category}]]%0a%0a!Non-English Programming%0a%0a:Author: akshaychekuri%0a%0a'''Summary:''' \\%0a%0a[[#summary]]%0a%0aMost programming languages are syntactically based on English, but what about non-English speakers?%0a%0a[[#summaryends]]%0a%0a----%0a[[#content]]%0a%0aSomething I believed many programmers, particularly native English speakers, take for granted is that they have a more natural understanding of most programming languages because their syntax is derived from the English language. For example, a common syntactic marker used in programming is the "if-else" statement. To an English speaker, the meaning of this statement is naturally understood. It reads as "if x condition is met, run y code, otherwise run z code". However, to a non-English speaker this concept does not make as much natural sense and the "if-else" syntax acts more symbolically for features of propositional logic. The concept of "if-else" exists in all languages, yet in programming languages the syntax is much more natural to an English speaker. %0a%0aOne solution to this is to create a sort of "mask" for programming languages and change the syntax to be more natural for other written languages. An example of this I found is the Hindawi Indic Programming System. This system aims to bring many common programming languages (including C, C++, assembly, BASIC, etc.) to a large variety of languages spoken in the Indian subcontinent, including Hindi, Bangla, Gujarati, Assamese and Nepali, among many others. The main aim of this project is to make programming more accessible to non-English speakers who may nonetheless be talented programmers but unable to realize that talent. It is particularly useful for younger children as many people in India learn English as a secondary language both formally and informally. This project bridges inequity as young children from English-speaking countries are usually able to pick up computer programming much more quickly than their non-English speaking counterparts, giving them a sort of head start.%0a%0ahttps://www.linux-magazine.com/index.php/content/download/63246/487546/version/1/file/Linux_World_News.pdf%0ahttps://sourceforge.net/projects/hindawi/%0ahttps://en.wikipedia.org/wiki/Hindawi_Programming_System%0a%0a%0a%0a[[#contentends]]%0a----%0a----%0a%0a!!Expansions:%0a[[#expansions]]%0a#foxbegin 221204-032814-746060#%0a(:div1 class=expansionhead:)%0a!!!Python and Non-English speakers %0a-> - kechezon%0a-> [-03.12.2022 - 19:28-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221204-032814-746060 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aOne of the most commonly cited strengths of the Python programming language is how intuitive it is to use because of how it's "just plain English" and "practically pseudocode" (pseudocode is a description of the code instructions written in a non-programming language). This is true, to a degree--the syntax is far easier to grasp compared to languages like Java or C# because the syntax is much closer to standard English syntax. %0a%0aFor example, a "for loop" header in other programming languages might look like%0a%0afor (int i = 0; i %3c 5; i++)%0a...%0a%0abut in Python it would look like%0a%0ai = 1%0afor i in range(5):%0a...%0a%0aBoth perform a certain set of instructions 5 times.%0a%0aBut if anything, this reliance on English would probably make Python HARDER to use for people who don't speak English; other program languages have most of their code based on symbols and only simple English words, but Python 's connection to English would make it even harder for someone who doesn't know English very well. Essentially, most mainstream programming languages are closer to a more "standardized" language of symbols more than Python is, despite Python being one of the most popular and widely used languages in the world.%0a>>%3c%3c%0a#foxend 221204-032814-746060#%0a#foxbegin 221204-213241-913630#%0a(:div1 class=expansionhead:)%0a!!!Why many programming languages seems to be in English %0a-> - adrian%0a-> [-04.12.2022 - 13:32-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221204-213241-913630 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aThe first reason would be that English is a very common language around the world and is learned by many people. Another reason would be that a lot of the earlier programming languages were made in countries that spoke English. For example, C was developed by an American computer scientist Dennis Ritchie. FORTRAN was designed by John Backus who was also an American computer scientist. These contributed to the fact that a lot of programming languages tended to have English syntax.%0a%0ahttps://www.technotification.com/2018/09/programming-languages-english.html%0ahttps://en.wikipedia.org/wiki/Fortran%0ahttps://en.wikipedia.org/wiki/C_(programming_language)%0a>>%3c%3c%0a#foxend 221204-213241-913630#%0a#foxbegin 221205-222131-8610#%0a(:div1 class=expansionhead:)%0a!!!Latin Programming %0a-> - nathandeyak%0a-> [-05.12.2022 - 14:21-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221205-222131-8610 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aWhile most programming languages are made and continue to be developed using the English language, some more esoteric projects have sought to use other languages, or none at all. One example of linguistic interest is the Perligata project (linked below). It is a modification of the Perl language that allows the use of Latin grammar. What makes this example interesting linguistically is that it changes the way programs are interpreted:%0aIn most computer languages, prefixes are rare, and usually involve special characters like $ or *, that aren't legal to use in variable names, and relations between words are parsed with a strict syntactic order. In Perligata, however, to conform to Latin grammar, suffixes are used, and word order is more free, which is a rather unique feature in programming languages.%0a%0ahttps://users.monash.edu/~damian/papers/HTML/Perligata.html%0a>>%3c%3c%0a#foxend 221205-222131-8610#%0a#foxbegin 221207-044850-131320#%0a(:div1 class=expansionhead:)%0a!!!Qalb and Right-to-Left Programming %0a-> - joe201%0a-> [-06.12.2022 - 20:48-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221207-044850-131320 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aOne additional hurdle some programmers with native languages such as Hebrew and Arabic may have is the left-to-right nature of most programming languages. As most programming languages were designed by English speakers with syntaxes involving English words and characters, nearly all programming languages are designed to be read and written with each line going left-to-right, and each consecutive line being below the last. For example, manny data structures such as arrays are represented with ascending indices going left-to-right, following English reading conventions, and languages such as Python exist that mandate left indentation of code, another example of left-to-right reading bias.%0aOne exception to this left-to-right programming language norm is Qalb (قلب), which is written using syntax entirely derived from Arabic. Qalb was created as a statement on this English bias seen in programming languages, as it not only defies the language convention of English syntax but even is written left to right. While Qalb is largely a proof of concept, it’s still interesting how programming concepts can be transformed into a right-to-left script to be more accessible to programmers without native Enlgish experience.%0a%0ahttps://github.com/nasser/--- %0a>>%3c%3c%0a#foxend 221207-044850-131320#%0a#foxbegin 221208-002454-659270#%0a(:div1 class=expansionhead:)%0a!!!Classical Chinese Programming Language %0a-> - cheng%0a-> [-07.12.2022 - 16:24-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221208-002454-659270 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aIn 2019, a CMU BCSA student Lingdong Huang developed "Wenyan-Lang", a programming language based on Chinese characters and the wenyan(文言) classical Chinese grammar system. He did not simply replace the English characters with Chinese; instead, he applied NLP techniques to convert classical Chinese grammar to various programming languages. In traditional Chinese, there is no punctuation mark and readers have to parse the sentences based solely on syntax. Preservation of this feature of traditional Chinese would be a challenge in creating compiler, because running the code requires the computer to pick out the instructions from other text strings. Huang adopts a very limited number of symbols (「, 」and 。) in Wenyang-lang and claims that programming punctuation and line breaks can be removed without affecting the output.%0a%0ahttps://github.com/wenyan-lang%0ahttps://wy-lang.org%0ahttps://syncedreview.com/2019/12/23/cmu-senior-develops-worlds-first-classical-chinese-programming-language/%0a>>%3c%3c%0a#foxend 221208-002454-659270#%0a#foxbegin 221209-192803-538440#%0a(:div1 class=expansionhead:)%0a!!!Genesis (proto-Hebrew esoteric language) %0a-> - nicholasm%0a-> [-09.12.2022 - 11:28-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221209-192803-538440 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aGenesis is an esolang that is based on proto-Hebrew, excepting only mathematical operators which use the same forms as in other modern languages. The documentation concludes, "If you are able to program in this language, I have failed," but even strange projects like this one might contribute towards engagement with long extinct language forms. CMU Student College has repeatedly hosted a course on esoteric programming languages which only represents one form of the large and varied attraction that these languages receive.%0a%0aEven beyond accessibility for those who don't speak English, programming languages might serve as a point of entry—albeit a potentially strange one as with Genesis—to learning other languages.%0a%0ahttps://github.com/elonlit/Genesis/blob/master/LICENSE%0a>>%3c%3c%0a#foxend 221209-192803-538440#%0a#foxbegin 221209-235023-184110#%0a(:div1 class=expansionhead:)%0a!!!A Hebrew Programming Language %0a-> - jackagui%0a-> [-09.12.2022 - 15:50-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221209-235023-184110 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aOn Hebrew Language Day, Aviv Carmi and Yakir Yehuda revealed Chava Script, a programming language entirely in Hebrew. The idea here is the "masking" idea suggested by the article, where the code is typed in Hebrew and is being translated in real-time to English and being run as JavaScript code. The coding is done right to left, accurate to Hebrew, but something that the creators acknowledged would probably make it harder to use. They did, however, challenge people to code a project using the language, and even offered to put it on their website if it were done.%0a%0ahttps://www.jpost.com/israel-news/meet-chava-script-an-entirely-hebrew-programming-script-654537%0a%0ahttps://chavascript.github.io/chavascript/%0a>>%3c%3c%0a#foxend 221209-235023-184110#%0a#foxbegin 221210-012520-479960#%0a(:div1 class=expansionhead:)%0a!!!Teaching languages vs fully fledged %0a-> - kushaanm%0a-> [-09.12.2022 - 17:25-]%0a>>rfloat%3c%3c   %0a(:if1 authgroup @tas:)%0a{[foxdelrange button 221210-012520-479960 {$FullName} ]}%0a(:if1end:)%0a>>%3c%3c%0a(:div1end:) %0a>>messageitem%3c%3c %0aWhen looking into foreign language programming languages, I found a list on Wikipedia. The list had a few fully fledged translations, but I noticed a lot of languages that had languages meant to teach students. However, these languages did not have a fully fledged successor (e.g. none of the main ones in use were on the list). This may be an issue, where students are not able to grow into a more mature programming language. In contrast, with Chinese, there exists Chinese Python, which is a major programming language that has a direct translation. It is interesting to think about whether this may have adverse affects on students who are not able to graduate into something more widespread.%0a%0ahttps://en.wikipedia.org/wiki/Non-English-based_programming_languages%0a>>%3c%3c%0a#foxend 221210-012520-479960#%0a[[#expansionsend]]%0a%0a----%0a%25red%25 '''Add an expansion:'''%0a%0a(:if [ exists GradebookExpansions.{$Name}-{$Author} || equal {$Author} {$:Author} ] :)%0a%0a(:elseif [ equal {Profiles.{$Author}$:andrewid} '' || equal {Profiles.{$Author}$:section} '' ] :)%0a%0aYou must enter your andrew ID and section before submitting an expansion. %0a%0a(:else:)%0a%0a(:foxform Site.FoxForms#newexpansion:)%0a%0a(:ifend:)%0a%0a----%0a----%0a%0a!!Comments%0a#foxbegin 221204-033105-109910#%0a(:div1 class=messagehead:)%0a>>rfloat%3c%3c   %0a[-03.12.2022 - 19:31-] &nbsp; %0a>>%3c%3c%0a(:if1 authgroup @tas:)%0a>>rfloat%3c%3c%0a{[foxdelrange button 221204-033105-109910 {$FullName} ]}%0a>>%3c%3c%0a(:if1end:)%0a!!!!!kechezon%0a(:div1end:) %0a>>messageitem%3c%3c %0a'''Correction on my expansion'''%0a>>messageitem%3c%3c%0aSlight correction on my expansion (besides the newline not working properly)%0a%0aFor the Python code, ignore the i = 1 portion and change range(4). range(4) contains the numbers 0-4 and so THAT would perform the instructions 5 times. %0a>>%3c%3c%0a#foxend 221204-033105-109910#%0a%0a%0a%0a%0a----%0a(:if equal {$Author} {$:Author}:)%0a!!Change article category%0a(:foxform Site.FoxForms#changearticlecategory:)%0a(:ifend:)%0a%0a%0a(:Section: D:)%0a(:Category: Varia:)%0a(:Title: Non-English Programming:)
time=1670635520
author:1670635520=kushaanm
diff:1670635520:1670629823:=197,213d196%0a%3c #foxbegin 221210-012520-479960#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Teaching languages vs fully fledged %0a%3c -> - kushaanm%0a%3c -> [-09.12.2022 - 17:25-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221210-012520-479960 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c When looking into foreign language programming languages, I found a list on Wikipedia. The list had a few fully fledged translations, but I noticed a lot of languages that had languages meant to teach students. However, these languages did not have a fully fledged successor (e.g. none of the main ones in use were on the list). This may be an issue, where students are not able to grow into a more mature programming language. In contrast, with Chinese, there exists Chinese Python, which is a major programming language that has a direct translation. It is interesting to think about whether this may have adverse affects on students who are not able to graduate into something more widespread.%0a%3c %0a%3c https://en.wikipedia.org/wiki/Non-English-based_programming_languages%0a%3c >>%3c%3c%0a%3c #foxend 221210-012520-479960#%0a
host:1670635520=96.235.24.205
author:1670629823=jackagui
diff:1670629823:1670614083:=178,196d177%0a%3c #foxbegin 221209-235023-184110#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!A Hebrew Programming Language %0a%3c -> - jackagui%0a%3c -> [-09.12.2022 - 15:50-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221209-235023-184110 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c On Hebrew Language Day, Aviv Carmi and Yakir Yehuda revealed Chava Script, a programming language entirely in Hebrew. The idea here is the "masking" idea suggested by the article, where the code is typed in Hebrew and is being translated in real-time to English and being run as JavaScript code. The coding is done right to left, accurate to Hebrew, but something that the creators acknowledged would probably make it harder to use. They did, however, challenge people to code a project using the language, and even offered to put it on their website if it were done.%0a%3c %0a%3c https://www.jpost.com/israel-news/meet-chava-script-an-entirely-hebrew-programming-script-654537%0a%3c %0a%3c https://chavascript.github.io/chavascript/%0a%3c >>%3c%3c%0a%3c #foxend 221209-235023-184110#%0a
host:1670629823=128.237.82.15
author:1670614083=nicholasm
diff:1670614083:1670459093:=159,177d158%0a%3c #foxbegin 221209-192803-538440#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Genesis (proto-Hebrew esoteric language) %0a%3c -> - nicholasm%0a%3c -> [-09.12.2022 - 11:28-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221209-192803-538440 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c Genesis is an esolang that is based on proto-Hebrew, excepting only mathematical operators which use the same forms as in other modern languages. The documentation concludes, "If you are able to program in this language, I have failed," but even strange projects like this one might contribute towards engagement with long extinct language forms. CMU Student College has repeatedly hosted a course on esoteric programming languages which only represents one form of the large and varied attraction that these languages receive.%0a%3c %0a%3c Even beyond accessibility for those who don't speak English, programming languages might serve as a point of entry—albeit a potentially strange one as with Genesis—to learning other languages.%0a%3c %0a%3c https://github.com/elonlit/Genesis/blob/master/LICENSE%0a%3c >>%3c%3c%0a%3c #foxend 221209-192803-538440#%0a
host:1670614083=128.237.82.5
author:1670459093=cheng
diff:1670459093:1670388528:=140,158d139%0a%3c #foxbegin 221208-002454-659270#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Classical Chinese Programming Language %0a%3c -> - cheng%0a%3c -> [-07.12.2022 - 16:24-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221208-002454-659270 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c In 2019, a CMU BCSA student Lingdong Huang developed "Wenyan-Lang", a programming language based on Chinese characters and the wenyan(文言) classical Chinese grammar system. He did not simply replace the English characters with Chinese; instead, he applied NLP techniques to convert classical Chinese grammar to various programming languages. In traditional Chinese, there is no punctuation mark and readers have to parse the sentences based solely on syntax. Preservation of this feature of traditional Chinese would be a challenge in creating compiler, because running the code requires the computer to pick out the instructions from other text strings. Huang adopts a very limited number of symbols (「, 」and 。) in Wenyang-lang and claims that programming punctuation and line breaks can be removed without affecting the output.%0a%3c %0a%3c https://github.com/wenyan-lang%0a%3c https://wy-lang.org%0a%3c https://syncedreview.com/2019/12/23/cmu-senior-develops-worlds-first-classical-chinese-programming-language/%0a%3c >>%3c%3c%0a%3c #foxend 221208-002454-659270#%0a
host:1670459093=128.237.82.10
author:1670388528=joe201
diff:1670388528:1670278867:=122,139d121%0a%3c #foxbegin 221207-044850-131320#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Qalb and Right-to-Left Programming %0a%3c -> - joe201%0a%3c -> [-06.12.2022 - 20:48-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221207-044850-131320 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c One additional hurdle some programmers with native languages such as Hebrew and Arabic may have is the left-to-right nature of most programming languages. As most programming languages were designed by English speakers with syntaxes involving English words and characters, nearly all programming languages are designed to be read and written with each line going left-to-right, and each consecutive line being below the last. For example, manny data structures such as arrays are represented with ascending indices going left-to-right, following English reading conventions, and languages such as Python exist that mandate left indentation of code, another example of left-to-right reading bias.%0a%3c One exception to this left-to-right programming language norm is Qalb (قلب), which is written using syntax entirely derived from Arabic. Qalb was created as a statement on this English bias seen in programming languages, as it not only defies the language convention of English syntax but even is written left to right. While Qalb is largely a proof of concept, it’s still interesting how programming concepts can be transformed into a right-to-left script to be more accessible to programmers without native Enlgish experience.%0a%3c %0a%3c https://github.com/nasser/--- %0a%3c >>%3c%3c%0a%3c #foxend 221207-044850-131320#%0a
host:1670388528=128.237.82.10
author:1670278867=nathandeyak
diff:1670278867:1670189561:=104,121d103%0a%3c #foxbegin 221205-222131-8610#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Latin Programming %0a%3c -> - nathandeyak%0a%3c -> [-05.12.2022 - 14:21-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221205-222131-8610 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c While most programming languages are made and continue to be developed using the English language, some more esoteric projects have sought to use other languages, or none at all. One example of linguistic interest is the Perligata project (linked below). It is a modification of the Perl language that allows the use of Latin grammar. What makes this example interesting linguistically is that it changes the way programs are interpreted:%0a%3c In most computer languages, prefixes are rare, and usually involve special characters like $ or *, that aren't legal to use in variable names, and relations between words are parsed with a strict syntactic order. In Perligata, however, to conform to Latin grammar, suffixes are used, and word order is more free, which is a rather unique feature in programming languages.%0a%3c %0a%3c https://users.monash.edu/~damian/papers/HTML/Perligata.html%0a%3c >>%3c%3c%0a%3c #foxend 221205-222131-8610#%0a
host:1670278867=128.237.82.18
author:1670189561=adrian
diff:1670189561:1670124665:=85,103d84%0a%3c #foxbegin 221204-213241-913630#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Why many programming languages seems to be in English %0a%3c -> - adrian%0a%3c -> [-04.12.2022 - 13:32-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221204-213241-913630 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c The first reason would be that English is a very common language around the world and is learned by many people. Another reason would be that a lot of the earlier programming languages were made in countries that spoke English. For example, C was developed by an American computer scientist Dennis Ritchie. FORTRAN was designed by John Backus who was also an American computer scientist. These contributed to the fact that a lot of programming languages tended to have English syntax.%0a%3c %0a%3c https://www.technotification.com/2018/09/programming-languages-english.html%0a%3c https://en.wikipedia.org/wiki/Fortran%0a%3c https://en.wikipedia.org/wiki/C_(programming_language)%0a%3c >>%3c%3c%0a%3c #foxend 221204-213241-913630#%0a
host:1670189561=128.237.82.20
author:1670124665=kechezon
diff:1670124665:1670124492:=106,125d105%0a%3c #foxbegin 221204-033105-109910#%0a%3c (:div1 class=messagehead:)%0a%3c >>rfloat%3c%3c   %0a%3c [-03.12.2022 - 19:31-] &nbsp; %0a%3c >>%3c%3c%0a%3c (:if1 authgroup @tas:)%0a%3c >>rfloat%3c%3c%0a%3c {[foxdelrange button 221204-033105-109910 {$FullName} ]}%0a%3c >>%3c%3c%0a%3c (:if1end:)%0a%3c !!!!!kechezon%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c '''Correction on my expansion'''%0a%3c >>messageitem%3c%3c%0a%3c Slight correction on my expansion (besides the newline not working properly)%0a%3c %0a%3c For the Python code, ignore the i = 1 portion and change range(4). range(4) contains the numbers 0-4 and so THAT would perform the instructions 5 times. %0a%3c >>%3c%3c%0a%3c #foxend 221204-033105-109910#%0a
host:1670124665=128.237.82.19
author:1670124492=kechezon
diff:1670124492:1670119556:=55,84c55%0a%3c #foxbegin 221204-032814-746060#%0a%3c (:div1 class=expansionhead:)%0a%3c !!!Python and Non-English speakers %0a%3c -> - kechezon%0a%3c -> [-03.12.2022 - 19:28-]%0a%3c >>rfloat%3c%3c   %0a%3c (:if1 authgroup @tas:)%0a%3c {[foxdelrange button 221204-032814-746060 {$FullName} ]}%0a%3c (:if1end:)%0a%3c >>%3c%3c%0a%3c (:div1end:) %0a%3c >>messageitem%3c%3c %0a%3c One of the most commonly cited strengths of the Python programming language is how intuitive it is to use because of how it's "just plain English" and "practically pseudocode" (pseudocode is a description of the code instructions written in a non-programming language). This is true, to a degree--the syntax is far easier to grasp compared to languages like Java or C# because the syntax is much closer to standard English syntax. %0a%3c %0a%3c For example, a "for loop" header in other programming languages might look like%0a%3c %0a%3c for (int i = 0; i %3c 5; i++)%0a%3c ...%0a%3c %0a%3c but in Python it would look like%0a%3c %0a%3c i = 1%0a%3c for i in range(5):%0a%3c ...%0a%3c %0a%3c Both perform a certain set of instructions 5 times.%0a%3c %0a%3c But if anything, this reliance on English would probably make Python HARDER to use for people who don't speak English; other program languages have most of their code based on symbols and only simple English words, but Python 's connection to English would make it even harder for someone who doesn't know English very well. Essentially, most mainstream programming languages are closer to a more "standardized" language of symbols more than Python is, despite Python being one of the most popular and widely used languages in the world.%0a%3c >>%3c%3c%0a%3c #foxend 221204-032814-746060#%0a---%0a> %0a
host:1670124492=128.237.82.19
author:1670119556=akshaychekuri
diff:1670119556:1670119556:=1,90d0%0a%3c (:if [ authgroup @tas || authgroup @admins || equal {$Author} '' ]:)%0a%3c %0a%3c (:toggle id=gi show="show grading interface" hide="hide grading interface":)%0a%3c %0a%3c >>id=gi%3c%3c%0a%3c %0a%3c [[GradebookArticles.{$Name}|See article in gradebook]] \\%0a%3c [[{$FullName}?action=diff|See all changes to article]] \\%0a%3c [[{$FullName}?action=edit|Edit this page]] \\%0a%3c Status: {GradebookArticles.{$Name}$:Status} %0a%3c %0a%3c (:foxform Site.FoxForms#gradeitem:)%0a%3c %0a%3c (:foxform Site.FoxForms#gradingcomment:)%0a%3c %0a%3c >>%3c%3c%0a%3c %0a%3c ----%0a%3c %0a%3c (:ifend:)%0a%3c %0a%3c [[!{$:Category}]]%0a%3c %0a%3c !Non-English Programming%0a%3c %0a%3c :Author: akshaychekuri%0a%3c %0a%3c '''Summary:''' \\%0a%3c %0a%3c [[#summary]]%0a%3c %0a%3c Most programming languages are syntactically based on English, but what about non-English speakers?%0a%3c %0a%3c [[#summaryends]]%0a%3c %0a%3c ----%0a%3c [[#content]]%0a%3c %0a%3c Something I believed many programmers, particularly native English speakers, take for granted is that they have a more natural understanding of most programming languages because their syntax is derived from the English language. For example, a common syntactic marker used in programming is the "if-else" statement. To an English speaker, the meaning of this statement is naturally understood. It reads as "if x condition is met, run y code, otherwise run z code". However, to a non-English speaker this concept does not make as much natural sense and the "if-else" syntax acts more symbolically for features of propositional logic. The concept of "if-else" exists in all languages, yet in programming languages the syntax is much more natural to an English speaker. %0a%3c %0a%3c One solution to this is to create a sort of "mask" for programming languages and change the syntax to be more natural for other written languages. An example of this I found is the Hindawi Indic Programming System. This system aims to bring many common programming languages (including C, C++, assembly, BASIC, etc.) to a large variety of languages spoken in the Indian subcontinent, including Hindi, Bangla, Gujarati, Assamese and Nepali, among many others. The main aim of this project is to make programming more accessible to non-English speakers who may nonetheless be talented programmers but unable to realize that talent. It is particularly useful for younger children as many people in India learn English as a secondary language both formally and informally. This project bridges inequity as young children from English-speaking countries are usually able to pick up computer programming much more quickly than their non-English speaking counterparts, giving them a sort of head start.%0a%3c %0a%3c https://www.linux-magazine.com/index.php/content/download/63246/487546/version/1/file/Linux_World_News.pdf%0a%3c https://sourceforge.net/projects/hindawi/%0a%3c https://en.wikipedia.org/wiki/Hindawi_Programming_System%0a%3c %0a%3c %0a%3c %0a%3c [[#contentends]]%0a%3c ----%0a%3c ----%0a%3c %0a%3c !!Expansions:%0a%3c [[#expansions]]%0a%3c %0a%3c [[#expansionsend]]%0a%3c %0a%3c ----%0a%3c %25red%25 '''Add an expansion:'''%0a%3c %0a%3c (:if [ exists GradebookExpansions.{$Name}-{$Author} || equal {$Author} {$:Author} ] :)%0a%3c %0a%3c (:elseif [ equal {Profiles.{$Author}$:andrewid} '' || equal {Profiles.{$Author}$:section} '' ] :)%0a%3c %0a%3c You must enter your andrew ID and section before submitting an expansion. %0a%3c %0a%3c (:else:)%0a%3c %0a%3c (:foxform Site.FoxForms#newexpansion:)%0a%3c %0a%3c (:ifend:)%0a%3c %0a%3c ----%0a%3c ----%0a%3c %0a%3c !!Comments%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c ----%0a%3c (:if equal {$Author} {$:Author}:)%0a%3c !!Change article category%0a%3c (:foxform Site.FoxForms#changearticlecategory:)%0a%3c (:ifend:)%0a%3c %0a%3c %0a%3c (:Section: D:)%0a%3c (:Category: Varia:)%0a%3c (:Title: Non-English Programming:)%0a\ No newline at end of file%0a
host:1670119556=73.154.246.147
